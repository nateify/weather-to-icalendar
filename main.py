import os
import sys
from datetime import timedelta
from http.server import BaseHTTPRequestHandler, ThreadingHTTPServer
from signal import SIGINT, signal
from urllib.parse import parse_qs, urlencode, urlparse

from requests.exceptions import HTTPError

from create_ical import return_calendar_content
from get_weather_data import SimpleHTTPError, generate_weather_data


def flat_opts(d):
    for key, value in d.items():
        if isinstance(value, list) and len(value) == 1:
            d[key] = value[0]
    return d


def bool_eval(value):
    true_values = {"y", "yes", "t", "true", "on", "1", 1, True}
    return str(value).lower() in true_values


class SharedCalendarServer(BaseHTTPRequestHandler):
    protocol_version = "HTTP/1.1"
    error_content_type = "text/plain"
    error_message_format = "Error %(code)d: %(message)s"

    def do_GET(self):
        path, query_components = self.parse_url()

        if path == "/weather":
            weather_opts = {
                "zip_code": query_components.get("zip", None),
                "metric": query_components.get("metric", False),
                "api_key": query_components.get("api_key", os.environ.get("ACCUWEATHER_API_KEY")),
                "show_location": query_components.get("show_location", False),
            }

            weather_opts = flat_opts(weather_opts)

            weather_opts["metric"] = bool_eval(weather_opts["metric"])
            weather_opts["show_location"] = bool_eval(weather_opts["show_location"])

            try:
                weather_data = generate_weather_data(**weather_opts)

                http_response = return_calendar_content(weather_data)

                last_update_dt = weather_data["LastUpdated"]
                expires_dt = last_update_dt + timedelta(hours=1)
                lu_http_date = BaseHTTPRequestHandler.date_time_string(last_update_dt.timestamp())
                expr_http_date = BaseHTTPRequestHandler.date_time_string(expires_dt.timestamp())

                extra_headers = {
                    "Last-Modified": lu_http_date,
                    "Expires": expr_http_date,
                    "Cache-Control": "public, max-age=3600, stale-while-revalidate=300, stale-if-error=86400",
                }

                self.write_response(200, "text/calendar; charset=utf-8", http_response, extra_headers)

            except SimpleHTTPError as http_err:
                self.send_error(http_err.status_code, http_err.content)

            except HTTPError as http_err:
                if http_err.response.content:
                    self.write_response(
                        http_err.response.status_code,
                        http_err.response.headers["Content-Type"],
                        http_err.response.content,
                    )
                elif http_err.response.reason:
                    self.send_error(http_err.response.status_code, http_err.response.response.reason)
                elif http_err.response:
                    self.send_error(http_err.response.status_code, f"Generated by upstream server")
                else:
                    self.send_error(502)

            except Exception as e:
                print(f"Exception type: {type(e).__name__}, Message: {str(e)}")
                self.send_error(500)

        elif path == "/link":
            html = f"""
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
            </head>
            <body>
                <a href="/weather?{urlencode(query_components, doseq=True)}">Link to iCalendar</a>
            </body>
            </html>
            """

            self.write_response(200, "text/html; charset=utf-8", html)

        elif path == "/":
            html = """
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Weather to iCalendar</title>
            </head>
            <body>
                <form action="/link" method="get">
                    Accuweather API Key: <input type="text" name="api_key"><br>
                    Zip Code: <input type="text" name="zip" pattern="\\d{5}" inputmode="numeric" required><br>
                    Units: <br>
                    <input type="radio" id="imperial" name="metric" value="false" checked>
                    <label for="imperial">Imperial</label><br>
                    <input type="radio" id="metric" name="metric" value="true">
                    <label for="metric">Metric</label><br>
                    Show Location: <br>
                    <input type="radio" id="yes" name="show_location" value="true">
                    <label for="yes">Yes</label><br>
                    <input type="radio" id="no" name="show_location" value="false" checked>
                    <label for="no">No</label><br>
                    <input type="submit" value="Submit">
                </form>
            </body>
            </html>
            """

            self.write_response(200, "text/html; charset=utf-8", html)

        elif path == "/favicon.ico":
            self.write_response(200, "image/x-icon", "")
        else:
            self.send_error(400, f"Invalid request {self.path}")

    def do_HEAD(self):
        self.do_GET()

    def parse_url(self):
        url_components = urlparse(self.path)
        return url_components.path, parse_qs(url_components.query)

    def write_response(self, status_code, content_type, content, headers=None):
        response = content if isinstance(content, bytes) else content.encode("utf-8")

        self.send_response(status_code)
        self.send_header("Content-Type", content_type)
        self.send_header("Content-Length", str(len(response)))

        if headers:
            for key, value in headers.items():
                self.send_header(key, value)

        self.end_headers()

        if self.command != "HEAD":
            self.wfile.write(response)


def start_server(host, port):
    server_address = (host, port)
    httpd = ThreadingHTTPServer(server_address, SharedCalendarServer)
    print(f"Server started on {host}:{port}")
    httpd.serve_forever()


def shutdown_handler(signum, frame):
    print("Shutting down server")
    exit(0)


def main():
    signal(SIGINT, shutdown_handler)

    if os.getenv("PYTHON_STDOUT_TO_STDERR") == "1":
        sys.stdout = sys.stderr

    if os.getenv("ACCUWEATHER_API_KEY"):
        print("Loaded ACCUWEATHER_API_KEY environment variable")

    server_port = os.getenv("PORT", 8080)
    server_address = os.getenv("HOST_ADDRESS", "127.0.0.1")

    start_server(server_address, int(server_port))


if __name__ == "__main__":
    main()
