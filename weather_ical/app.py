import os
import sys
from datetime import timedelta
from urllib.parse import urlencode

from bottle import Bottle, HTTPError, request, response, run
from requests.exceptions import HTTPError as RequestsHTTPError

from create_ical import return_calendar_content
from get_weather_data import generate_weather_data
from weather_ical.data.client import SimpleHTTPError


def bool_eval(value) -> bool:
    true_values = {"y", "yes", "t", "true", "on", "1", 1, True}
    return str(value).lower() in true_values


app = Bottle()


@app.route("/weather")
def weather_calendar():
    weather_opts = {
        "zip_code": request.query.get("zip", None),
        "metric": bool_eval(request.query.get("metric", False)),
        "show_location": bool_eval(request.query.get("show_location", False)),
    }

    try:
        weather_data = generate_weather_data(**weather_opts)

        calendar_content = return_calendar_content(weather_data)

        last_update_dt = weather_data["LastUpdated"]
        expires_dt = last_update_dt + timedelta(hours=1)

        response.content_type = "text/calendar; charset=utf-8"
        response.headers["Last-Modified"] = last_update_dt.strftime("%a, %d %b %Y %H:%M:%S GMT")
        response.headers["Expires"] = expires_dt.strftime("%a, %d %b %Y %H:%M:%S GMT")
        response.headers["Cache-Control"] = "public, max-age=3600, stale-while-revalidate=300, stale-if-error=86400"

        return calendar_content

    except SimpleHTTPError as http_err:
        raise HTTPError(http_err.status_code, http_err.content)

    except RequestsHTTPError as http_err:
        if http_err.response.content:
            response.status = http_err.response.status_code
            response.content_type = http_err.response.headers.get("Content-Type", "text/plain")
            return http_err.response.content
        if http_err.response.reason:
            raise HTTPError(http_err.response.status_code, http_err.response.reason)
        if http_err.response:
            raise HTTPError(http_err.response.status_code, "Generated by upstream server")

        raise HTTPError(502, "Bad Gateway")

    except Exception as e:
        print(f"Exception type: {type(e).__name__}, Message: {str(e)}")
        raise HTTPError(500, "Internal Server Error")


@app.route("/link")
def link():
    query_params = dict(request.query.decode())

    html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
    </head>
    <body>
        <a href="/weather?{urlencode(query_params, doseq=True)}">Link to iCalendar</a>
    </body>
    </html>
    """

    response.content_type = "text/html; charset=utf-8"
    return html


@app.route("/")
def index():
    html = """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Weather to iCalendar</title>
    </head>
    <body>
        <form action="/link" method="get">
            Zip Code: <input type="text" name="zip" pattern="\\d{5}" inputmode="numeric" required><br>
            Units: <br>
            <input type="radio" id="imperial" name="metric" value="false" checked>
            <label for="imperial">Imperial</label><br>
            <input type="radio" id="metric" name="metric" value="true">
            <label for="metric">Metric</label><br>
            Show Location: <br>
            <input type="radio" id="yes" name="show_location" value="true">
            <label for="yes">Yes</label><br>
            <input type="radio" id="no" name="show_location" value="false" checked>
            <label for="no">No</label><br>
            <input type="submit" value="Submit">
        </form>
    </body>
    </html>
    """

    response.content_type = "text/html; charset=utf-8"
    return html


@app.route("/favicon.ico")
def favicon():
    response.content_type = "image/x-icon"
    return ""


def main():
    if os.getenv("PYTHON_STDOUT_TO_STDERR") == "1":
        sys.stdout = sys.stderr

    server_port = int(os.getenv("PORT", 8080))
    server_address = os.getenv("HOST_ADDRESS", "127.0.0.1")

    print(f"Server started on {server_address}:{server_port}")
    run(app, host=server_address, port=server_port, debug=False)


if __name__ == "__main__":
    main()
